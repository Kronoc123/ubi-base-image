on:
  push:
      branches: [main]

name: "Docker build"
permissions:
  contents: read
  packages: write
  id-token: write
  attestations: write
  security-events: write
defaults:
run:
  working-directory: './'
env: 
REGISTRY: ghcr.io
IMAGE_NAME: ${{ github.repository  }}
jobs:
  Build-Image:
      runs-on: self-hosted
      env:
        IMAGE_NAME_LOWER: ""
      steps:
          - name: Clone Repo
            uses: actions/checkout@v4
          - name: Set Env vars
            run: |
              IMAGE_NAME_LOWER=$(echo -n ${{ env.IMAGE_NAME }} | tr '[:upper:]' '[:lower:]')
              echo "IMAGE_NAME_LOWER=$IMAGE_NAME_LOWER" >> $GITHUB_ENV
          - name: Log in to Red Hat Registry
            uses: redhat-actions/podman-login@v1
            with:
              registry: ${{ env.REGISTRY }}
              username: ${{ github.actor }}
              password: ${{ secrets.GITHUB_TOKEN }}
          - name: Extract metadata (tags, labels) for Docker
            id: meta
            uses: docker/metadata-action@v5
            with:
              images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          - name: Buildah Action
            uses: redhat-actions/buildah-build@v2
            with:
              image: my-new-image
              tags:  ${{ steps.meta.outputs.tags }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}:conor-ubi-9 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}:latest
              containerfiles: |
                ./dockerfile
              extra-args: |
                --pull
          - name: Check images created
            run: buildah images | grep '${{ env.IMAGE_NAME }}'
          - name: Generate artifact attestation
            uses: actions/attest-build-provenance@v1
            with:
              subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}
              subject-digest: ${{ steps.push.outputs.digest }}
              push-to-registry: true
            
  CIS-Bench:
      runs-on: self-hosted
      needs: Build-Image
      env:
        IMAGE_NAME_LOWER: ""
      steps:
          - name: Clone Repo
            uses: actions/checkout@v4
          - name: Log in to the Container registry
            uses: docker/login-action@v3
            with:
              registry: ${{ env.REGISTRY }}
              username: ${{ github.actor }}
              password: ${{ secrets.GITHUB_TOKEN }}
          - name: Set Env vars
            run: |
              IMAGE_NAME_LOWER=$(echo -n ${{ env.IMAGE_NAME }} | tr '[:upper:]' '[:lower:]')
              echo "IMAGE_NAME_LOWER=$IMAGE_NAME_LOWER" >> $GITHUB_ENV
          - name: Pull new base image
            run: docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}:main
          - name: Setup docker bench
            run: |
              git clone https://github.com/docker/docker-bench-security.git
              cd docker-bench-security
              docker build --no-cache -t docker-bench-security .
          - name: Run Base images
            run: |
              docker run -d --name conor-ubi-9 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}:conor-ubi-9
          - name: Run docker bench
            run: |
              docker container ls --filter name=conor-ubi-9
              docker run --rm --net host --pid host --userns host --cap-add audit_control \
                -e DOCKER_CONTENT_TRUST=$DOCKER_CONTENT_TRUST \
                -v /etc:/etc:ro \
                -v /lib/systemd/system:/lib/systemd/system:ro \
                -v /usr/bin/containerd:/usr/bin/containerd:ro \
                -v /usr/bin/runc:/usr/bin/runc:ro \
                -v /usr/lib/systemd:/usr/lib/systemd:ro \
                -v /var/lib:/var/lib:ro \
                -v /var/run/docker.sock:/var/run/docker.sock:ro \
                --label docker_bench_security \
                docker-bench-security -i ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}:conor-ubi-9 -c container_images
          - name: Snyk scan
            uses: snyk/actions/docker@master
            continue-on-error: true
            env:
              SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
            with:
              image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}
              args: --file=dockerfile --sarif-file-output=snyk.sarif --severity-threshold=high
              sarif: true
          - run: cat snyk.sarif
            continue-on-error: true
          - name: Upload result to GitHub Code Scanning
            uses: github/codeql-action/upload-sarif@v3
            with:
              sarif_file: snyk.sarif
