on:
    push:
        branches: [main]

name: "Docker build"
permissions:
    contents: read
    pull-requests: write
    packages: write
    id-token: write
defaults:
  run:
    working-directory: './'
env: 
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository  }}
jobs:
    Build-Image:
        runs-on: ubuntu-latest
        env:
          IMAGE_NAME_LOWER: ""
        steps:
            - name: Clone Repo
              uses: actions/checkout@v4
            - name: Set Env vars
              run: |
                IMAGE_NAME_LOWER=$(echo -n ${{ env.IMAGE_NAME }} | tr '[:upper:]' '[:lower:]')
                echo "IMAGE_NAME_LOWER=$IMAGE_NAME_LOWER" >> $GITHUB_ENV
            - name: Pull UBI 9 Image
              run: docker pull registry.access.redhat.com/ubi9/ubi@sha256:ed84f34cd929ea6b0c247b6daef54dd79602804a32480a052951021caf429494
            - name: Log in to the Container registry
              uses: docker/login-action@v3
              with:
                registry: ${{ env.REGISTRY }}
                username: ${{ github.actor }}
                password: ${{ secrets.GITHUB_TOKEN }}
            - name: Setup buildx
              uses: docker/setup-buildx-action@v2
              with:
                driver: docker-container
            # This step uses [docker/metadata-action](https://github.com/docker/metadata-action#about) to extract tags and labels that will be applied to the specified image. The `id` "meta" allows the output of this step to be referenced in a subsequent step. The `images` value provides the base name for the tags and labels.
            - name: Extract metadata (tags, labels) for Docker
              id: meta
              uses: docker/metadata-action@v5
              with:
                images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
            # This step uses the `docker/build-push-action` action to build the image, based on your repository's `Dockerfile`. If the build succeeds, it pushes the image to GitHub Packages.
            # It uses the `context` parameter to define the build's context as the set of files located in the specified path. For more information, see "[Usage](https://github.com/docker/build-push-action#usage)" in the README of the `docker/build-push-action` repository.
            # It uses the `tags` and `labels` parameters to tag and label the image with the output from the "meta" step.
            - name: Build and push Docker image
              id: push
              uses: docker/build-push-action@v5
              with:
                context: .
                push: true
                provenance: mode=max
                sbom: true
                tags: |
                  ${{ steps.meta.outputs.tags }}
                  ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}:conor-ubi-9
                  ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}:latest
                labels: ${{ steps.meta.outputs.labels }}

              
    CIS-Bench:
        runs-on: ubuntu-latest
        needs: Build-Image
        env:
          IMAGE_NAME_LOWER: ""
        steps:
            - name: Clone Repo
              uses: actions/checkout@v4
            - name: Log in to the Container registry
              uses: docker/login-action@v3
              with:
                registry: ${{ env.REGISTRY }}
                username: ${{ github.actor }}
                password: ${{ secrets.GITHUB_TOKEN }}
            - name: Set Env vars
              run: |
                IMAGE_NAME_LOWER=$(echo -n ${{ env.IMAGE_NAME }} | tr '[:upper:]' '[:lower:]')
                echo "IMAGE_NAME_LOWER=$IMAGE_NAME_LOWER" >> $GITHUB_ENV
            - name: Pull new base image
              run: docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}:main
            - name: Setup docker bench
              run: |
                git clone https://github.com/docker/docker-bench-security.git
                cd docker-bench-security
                docker build --no-cache -t docker-bench-security .
            - name: Run Base images
              run: |
                docker run -d --name conor-ubi-9 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}:conor-ubi-9
            - name: Run docker bench
              run: |
                docker container ls --filter name=conor-ubi-9
                docker run --rm --net host --pid host --userns host --cap-add audit_control \
                  -e DOCKER_CONTENT_TRUST=$DOCKER_CONTENT_TRUST \
                  -v /etc:/etc:ro \
                  -v /lib/systemd/system:/lib/systemd/system:ro \
                  -v /usr/bin/containerd:/usr/bin/containerd:ro \
                  -v /usr/bin/runc:/usr/bin/runc:ro \
                  -v /usr/lib/systemd:/usr/lib/systemd:ro \
                  -v /var/lib:/var/lib:ro \
                  -v /var/run/docker.sock:/var/run/docker.sock:ro \
                  --label docker_bench_security \
                  docker-bench-security -i ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}:conor-ubi-9 -c container_images
            - name: Snyk scan
              uses: snyk/actions/docker@master
              continue-on-error: true
              env:
                SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
              with:
                image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}
                args: --file=dockerfile --sarif-file-output=snyk.sarif
                sarif: true
            - run: ls -al
            - name: Upload result to GitHub Code Scanning
              uses: github/codeql-action/upload-sarif@v3
              with:
                sarif_file: snyk.sarif
